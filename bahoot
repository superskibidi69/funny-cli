#!/bin/bash
set -e

# OS detection
detect_os() {
  case "$(uname -s)" in
    Linux*)   OS=Linux ;;
    Darwin*)  OS=Mac ;;
    CYGWIN*|MINGW*|MSYS*) OS=Windows ;;
    *)        OS=Unknown ;;
  esac
}

# Windows fallback
windows_fallback() {
  echo -e "\033[0;31mBahoot CLI requires Bash.\033[0m"
  echo "You appear to be running in Windows CMD or PowerShell."
  echo "Please use Git Bash, WSL, or a Bash-compatible terminal."
  echo "Download Git Bash: https://git-scm.com/download/win"

    # Try to run PowerShell version if available
    if command -v powershell.exe >/dev/null 2>&1; then
      powershell.exe -ExecutionPolicy Bypass -File "$(dirname "$0")/bahoot.ps1" "$@"
      exit $?
    fi
}

# 🎨 Terminal colors
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# 🌀 Animated loader
loader() {
  echo -n "Loading"
  for i in {1..5}; do
    echo -n "."
    sleep 0.2
  done
  echo ""
}

# 🚀 ASCII rocket launch
rocket() {
  cols=$(tput cols)
  rocket="🚀"
  gas="💨"
  explosion="💥"
  rocket_len=2
  max_pos=$((cols-rocket_len-1))
  for ((i=0; i<=max_pos; i++)); do
    clear
    line=""
    # Draw gas trail behind rocket
    for ((j=0; j<i; j++)); do line+="$gas"; done
    # Draw rocket
    line+="$rocket"
    # Draw spaces after rocket (to fill line)
    for ((j=0; j<cols-i-rocket_len; j++)); do line+=" "; done
    # Draw explosion at end
    if ((i == max_pos)); then
      line+="$explosion"
    fi
    echo -e "${YELLOW}${line}${NC}"
    speed=$(echo "scale=3; 0.18 - ($i/$max_pos)*0.13" | bc)
    sleep $speed
  done
  echo -e "${GREEN}Rocket launch complete!${NC}"
}

# 🧠 Diagnostic scanner
doctor() {
  echo -e "${GREEN}🔍 Running diagnostics...${NC}"
  sleep 0.5
  echo "✅ Bash version: $(bash --version | head -n 1)"
  echo "✅ Terminal: $TERM"
  echo "✅ User: $USER"
  echo "✅ Host: $(hostname)"
  UPTIME=$(uptime -p 2>/dev/null || uptime)
  echo "✅ Uptime: $UPTIME"
}

# 💥 Fake meltdown
prank() {
  loader
  for i in {1..5}; do
    echo -e "${RED}💥 SYSTEM FAILURE DETECTED${NC}"
    sleep 0.2
    echo -e "${YELLOW} Dumping memory...${NC}"
    sleep 0.3
    echo -e "${RED} Kernel panic: unexpected token 'bahoot'${NC}"
    sleep 0.3
    clear
  done
  echo -e "${RED} Memory dumped.${NC}"
  sleep 1
  echo -e "${GREEN}Just kidding 😎${NC}"
}

# 🧨 Chaos mode
chaos() {
  echo -e "${CYAN}🧨 Entering chaos mode...${NC}"
  sleep 0.5
  for i in {1..20}; do
    color=$((31 + (i % 6)))
    echo -e "\033[1;${color}mERROR $i: sanity not found${NC}"
    sleep 0.07
  done
  for i in {1..10}; do
    echo -e "\033[1;33mCHAOS LEVEL: $((RANDOM % 100))%${NC}"
    sleep 0.05
  done
  echo -e "${CYAN}💫 Chaos complete.${NC}"
}

# 🧪 Matrix mode
matrix() {
  echo -e "${GREEN}🧪 Entering matrix mode...${NC}"
  cols=$(tput cols)
  rows=$(tput lines)
  trap "tput cnorm; clear; exit" SIGINT SIGTERM
  tput civis
  clear
  # Each stream has a position and length
  local -a pos
  local -a len
  for ((i=0; i<cols; i++)); do
    pos[i]=$((RANDOM % rows))
    len[i]=$((3 + RANDOM % (rows/2)))
  done
  for ((frame=0; frame<200; frame++)); do
    for ((i=0; i<cols; i++)); do
      # Print fading trail
      for ((j=0; j<len[i]; j++)); do
        y=$((pos[i] - j))
        if ((y > 0 && y <= rows)); then
          if ((j == 0)); then
            printf "\033[%d;%dH\033[1;97m%s\033[0m" "$y" "$((i+1))" "$(echo {a..z} {A..Z} {0..9} | tr ' ' '\n' | shuf | head -n1)"
          elif ((j < len[i]/2)); then
            printf "\033[%d;%dH\033[1;32m%s\033[0m" "$y" "$((i+1))" "$(echo {a..z} {A..Z} {0..9} | tr ' ' '\n' | shuf | head -n1)"
          else
            printf "\033[%d;%dH\033[0;32m%s\033[0m" "$y" "$((i+1))" "$(echo {a..z} {A..Z} {0..9} | tr ' ' '\n' | shuf | head -n1)"
          fi
        fi
      done
      # Move stream down
      pos[i]=$((pos[i]+1))
      if ((pos[i] - len[i] > rows)); then
        pos[i]=1
        len[i]=$((3 + RANDOM % (rows/2)))
      fi
    done
    sleep 0.05
  done
  tput cnorm
  echo -e "${GREEN}\n🧠 Matrix exited.${NC}"
}

banner() {
  local lines=(
" ______  _______ _     _  _____   _____  _______"
" |_____] |_____| |_____| |     | |     |    |   "
" |_____] |     | |     | |_____| |_____|    |   "
  )
  clear
  for line in "${lines[@]}"; do
    # print each character with a short delay for a typewriter effect
    for ((i=0; i<${#line}; i++)); do
      echo -ne "${CYAN}${line:$i:1}${NC}"
      sleep 0.01
    done
    echo ""  # new line after each banner line
    sleep 0.15
  done
}

# 🔄 Self-update
update() {
  echo -e "${CYAN}🔄 Updating Bahoot CLI...${NC}"
  curl -fsSL https://raw.githubusercontent.com/superskibidi69/funny-cli/main/bahoot -o "$0"
  chmod +x "$0"
  echo -e "${GREEN}✅ Update complete!${NC}"
}

# 💣 Self-destruct
self_destruct() {
  echo -e "${RED}💣 Self-destruct sequence initiated...${NC}"
  sleep 1
  echo "Deleting Bahoot CLI from: $0"
  rm -- "$0"
}

# 🎭 Troll mode
troll() {
  loader
  messages=("Installing virus..." "Formatting disk..." "Sending your IP to Bahoot HQ..." "Just kidding 😎")
  for msg in "${messages[@]}"; do
    echo -e "${RED}$msg${NC}"
    sleep 0.5
  done
}

# 🎉 Party mode
party() {
  echo -e "${YELLOW}🎉 Welcome to Bahoot Party Mode!${NC}"
  for i in {1..10}; do
    color=$((31 + (RANDOM % 6)))
    echo -e "\033[1;${color}m🎊 🎈 🎉 Bahoot rocks! 🎉 🎈 🎊${NC}"
    sleep 0.15
  done
  echo -e "${GREEN}🎵 Party's over, back to work!${NC}"
}

# 🦠 Fake virus scan
scan() {
  echo -e "${RED}🦠 Scanning system for viruses...${NC}"
  sleep 1
  echo "Found: 3 threats"
  sleep 1
  echo "Threat 1: Bahoot overload"
  echo "Threat 2: Excessive swag"
  echo "Threat 3: Terminal too cool"
  echo -e "${GREEN}✅ All threats neutralized.${NC}"
}

# 🖥️ Boot sequence
boot() {
  echo -e "${CYAN}🖥️ Booting Bahoot OS...${NC}"
  sleep 0.5
  echo "Initializing kernel..."
  sleep 0.5
  echo "Loading modules..."
  sleep 0.5
  echo "Mounting /bahoot..."
  sleep 0.5
  echo "Welcome to Bahoot OS 🤖"
}

# 💻 Fake hacking
hack() {
  echo -e "${GREEN}💻 Hacking in progress...${NC}"
  for i in {1..20}; do
    echo "Accessing node $i... success"
    sleep 0.1
  done
  echo -e "${RED}🔥 Firewall breached. Just kidding.${NC}"
}

# ⚡ Glitch effect
glitch() {
  chars="█▓▒░@#$%^&*()[]{}<>~ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
  cols=$(tput cols)
  for i in {1..15}; do
    clear
    for j in {1..8}; do
      len=$((10 + RANDOM % cols))
      str=""
      for ((k=0; k<len; k++)); do
        str+="${chars:RANDOM%${#chars}:1}"
      done
      color=$((31 + RANDOM % 7))
      echo -e "\033[1;${color}m${str}${NC}"
    done
    sleep 0.07
  done
  echo -e "${GREEN}System stabilized.${NC}"
}

ball() {
  tput civis  # hide cursor
  stty -echo  # disable input echoing
  
  local cols=$(tput cols)
  local rows=$(tput lines)
  local x=$((cols / 2))
  local y=$((rows / 2))
  local dx=1
  local dy=1
  local ball="●"
  local trail_char="·"
  local colors=(31 32 33 36 35 34)  # ANSI color codes: red, green, yellow, cyan, magenta, blue
  local color_index=0
  local trail_length=12  # Increased length for better visual effect
  
  # Arrays to store trail positions and colors
  local -a trail_x=()
  local -a trail_y=()
  local -a trail_c=()
  local -a trail_age=()  # Track age of each trail segment
  
  # Clear screen initially
  clear

  trap "tput cnorm; stty echo; clear; exit" SIGINT SIGTERM

  while true; do
    # Store current position for trail (with age 0)
    trail_x=("$x" "${trail_x[@]:0:$trail_length}")
    trail_y=("$y" "${trail_y[@]:0:$trail_length}")
    trail_c=("$color_index" "${trail_c[@]:0:$trail_length}")
    trail_age=(0 "${trail_age[@]:0:$trail_length}")  # Newest trail has age 0

    # Clear previous ball position
    printf "\033[%d;%dH " "$y" "$x"

    # Draw trail with fading effect based on age
    for ((t=0; t<${#trail_x[@]}; t++)); do
      if [[ -n "${trail_x[t]}" && -n "${trail_y[t]}" ]]; then
        # Increase age of this trail segment
        trail_age[t]=$((trail_age[t] + 1))
        
        # Remove trail segments that are too old
        if [[ ${trail_age[t]} -gt $((trail_length / 2)) ]]; then
          printf "\033[%d;%dH " "${trail_y[t]}" "${trail_x[t]}"
          # Mark for removal by setting to empty
          trail_x[t]=""
          trail_y[t]=""
        else
          # Calculate fade intensity based on age
          local fade_intensity=$((trail_age[t] * 2))
          if [[ $fade_intensity -gt 5 ]]; then
            fade_intensity=5  # Cap the fade intensity
          fi
          
          # Draw with appropriate fade
          printf "\033[%d;%dH\033[2;%dm%s\033[0m" "${trail_y[t]}" "${trail_x[t]}" "${colors[trail_c[t]]}" "$trail_char"
        fi
      fi
    done

    # Move ball
    ((x += dx))
    ((y += dy))

    # Bounce off edges with proper boundary checking
    if ((x <= 1)); then
      x=2
      dx=$(( -dx ))
      color_index=$(( (color_index + 1) % ${#colors[@]} ))
    elif ((x >= cols)); then
      x=$((cols - 1))
      dx=$(( -dx ))
      color_index=$(( (color_index + 1) % ${#colors[@]} ))
    fi

    if ((y <= 1)); then
      y=2
      dy=$(( -dy ))
      color_index=$(( (color_index + 1) % ${#colors[@]} ))
    elif ((y >= rows)); then
      y=$((rows - 1))
      dy=$(( -dy ))
      color_index=$(( (color_index + 1) % ${#colors[@]} ))
    fi

    # Draw ball with current color
    printf "\033[%d;%dH\033[1;%dm%s\033[0m" "$y" "$x" "${colors[$color_index]}" "$ball"

    # Refresh display
    printf "\033[0;0H"  # Move cursor to top-left to minimize flickering

    sleep 0.0635363
  done
}

# 🦑 Squid mode
squid() {
  echo -e "${CYAN}🦑 Squid mode activated!${NC}"
  squid_frames=(
    "    ___\n   /   \\\n  | o o |\n   \\_-_/\n    |||\n   /|||\\\n  ( ||| )\n   \\|||/\n    vvv"
    "    ___\n   /   \\\n  | ^ ^ |\n   \\_-_/\n    |||\n   /|||\\\n  ( ||| )\n   \\|||/\n    ^^^  "
    "    ___\n   /   \\\n  | - - |\n   \\_u_/\n    |||\n   /|||\\\n  ( ||| )\n   \\|||/\n    ~~~"
    "    ___\n   /   \\\n  | o o |\n   \\_-_/\n    |||\n   \\|||/\n  ( ||| )\n   /|||\\\n    ^^^  "
  )
  
  for cycle in {1..3}; do
    for frame in "${squid_frames[@]}"; do
      clear
      echo -e "${CYAN}$frame${NC}"
      echo -e "\n${GREEN}~ Swimming through the depths ~${NC}"
      sleep 0.4
    done
  done
  echo -e "${CYAN}🦑 Squid out!${NC}"
}

# 🦆 Duck spam
duck() {
  echo -e "${YELLOW}Quack! Quack! Quack!${NC}"
  duck_frames=(
    "       __\n      (o >\n   \\_\\_\\)#_)\n~~~~~~~~~~~~~~~~~~~~~~~~"
    "       __\n      (o<\n   \\_\\_\\)#_)\n~~~~~~~~~~~~~~~~~~~~~~~~"
    "       __\n      (o >\n   \\_\\_\\)#_)  *splash*\n~~~~~~~~~~~~~~~~~~~~~~~~"
    "       __\n      (^ >\n   \\_\\_\\)#_)\n~~~~~~~~~~~~~~~~~~~~~~~~"
  )
  
  positions=(5 10 15 20 25 30 20 15 10 5)
  
  for cycle in {1..2}; do
    for pos in "${positions[@]}"; do
      clear
      echo
      for ((i=0; i<pos; i++)); do echo -n " "; done
      echo -e "${YELLOW}${duck_frames[$((cycle % 4))]}${NC}"
      echo -e "\n${GREEN}Quack! Swimming around the pond!${NC}"
      sleep 0.3
    done
  done
  echo -e "${GREEN}All ducks have swum away.${NC}"
}

# 🦀 Crab rave
crab() {
  echo -e "${CYAN}🦀 Crab rave started!${NC}"
  crab_frames=(
    "   \\o/  \\o/\n    |    |\n  _/ \\__/ \\_\n {.  \\_/  .}\n  \\._    _./\n     |  |\n    /    \\"
    "   \\o|  |o/\n    |    |\n  _/ \\__/ \\_\n {.  \\_/  .}\n  \\._    _./\n     |  |\n    /    \\"
    "   /o\\  /o\\\n    |    |\n  _/ \\__/ \\_\n {.  \\_/  .}\n  \\._    _./\n     |  |\n    /    \\"
    "   |o/  \\o|\n    |    |\n  _/ \\__/ \\_\n {.  \\_/  .}\n  \\._    _./\n     |  |\n    /    \\"
  )
  
  positions=(2 8 15 22 28 35 28 22 15 8 2)
  
  for cycle in {1..2}; do
    for pos in "${positions[@]}"; do
      clear
      echo
      for ((i=0; i<pos; i++)); do echo -n " "; done
      echo -e "${RED}${crab_frames[$((cycle % 4))]}${NC}"
      echo -e "\n${YELLOW}🎵 Crab rave! Moving sideways! 🎵${NC}"
      sleep 0.4
    done
  done
  echo -e "${GREEN}Crab rave ended.${NC}"
}

# 🐸 Frog rain
frog() {
  echo -e "${GREEN}🐸 Frog rain incoming...${NC}"
  for i in {1..20}; do
    echo -e "🐸" | fold -w $((RANDOM % 10 + 1))
    sleep 0.07
  done
  echo -e "${CYAN}Frogs gone!${NC}"
}

# 🍀 Fortune
fortune() {
  quotes=("You will write bug-free code today." "Bahoot believes in you." "Your terminal is your canvas." "Don't forget to hydrate.")
  echo -e "${GREEN}🍀 Fortune:${NC} ${quotes[$RANDOM % ${#quotes[@]}]}"
}

# 🔊 Echo with flair
echo_cmd() {
  echo -e "${CYAN}🔊 You said:${NC} $*"
}

# 🧼 Clear screen
clear_cmd() {
  clear
  echo -e "${GREEN}🧼 Screen cleared.${NC}"
}

# 📜 Credits
credits() {
  echo -e "${CYAN}📜 Bahoot CLI was built by superfood.${NC}"
  echo "Inspired by chaos, crafted with shell magic."
}

# 🧼 Help menu
help_menu() {
  echo -e "${CYAN}Bahoot CLI 🤖 — Available commands:${NC}"
  echo "  ball           - Bouncing ball with color trail"
  echo "  banner         - Animated Bahoot ASCII logo"
  echo "  boot           - Simulate Bahoot OS boot sequence"
  echo "  chaos          - Print colorful chaos errors"
  echo "  crab           - Crab rave animation"
  echo "  credits        - Show Bahoot CLI credits"
  echo "  clear          - Clear the screen"
  echo "  deploy         - Launch ASCII rocket"
  echo "  doctor         - Show system diagnostics"
  echo "  duck           - Spam the terminal with ducks"
  echo "  echo [text]    - Repeat your input with flair"
  echo "  fortune        - Get a random fortune/quote"
  echo "  frog           - Frog rain animation"
  echo "  glitch         - Terminal glitch effect"
  echo "  hack           - Fake hacking animation"
  echo "  help           - Show this help menu"
  echo "  matrix         - Matrix movie rain effect"
  echo "  party          - Celebrate with confetti"
  echo "  prank          - Fake system meltdown"
  echo "  scan           - Fake virus scan"
  echo "  self-destruct  - Dramatically delete Bahoot CLI"
  echo "  squid          - Squid mode animation"
  echo "  troll          - Print fake errors and warnings"
  echo "  update         - Update Bahoot CLI from GitHub"
}

case "$1" in
  prank) prank ;;
  deploy) rocket ;;
  chaos) chaos ;;
  matrix) matrix ;;
  doctor) doctor ;;
  banner) banner ;;
  update) update ;;
  self-destruct) self_destruct ;;
  troll) troll ;;
  party) party ;;
  scan) scan ;;
  boot) boot ;;
  hack) hack ;;
  glitch) glitch ;;
  ball) ball ;;
  squid) squid ;;
  duck) duck ;;
  crab) crab ;;
  frog) frog ;;
  fortune) fortune ;;
  echo) shift; echo_cmd "$@" ;;
  clear) clear_cmd ;;
  credits) credits ;;
  help|"") help_menu ;;   # no banner here
  *) help_menu ;;
esac
